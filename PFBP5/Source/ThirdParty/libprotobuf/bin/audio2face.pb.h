// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio2face.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_audio2face_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_audio2face_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_audio2face_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_audio2face_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_audio2face_2eproto;
namespace tutorial {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Request* Arena::CreateMaybeMessage<::tutorial::Request>(Arena*);
template<> ::tutorial::Response* Arena::CreateMaybeMessage<::tutorial::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kTtsTypeFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string tts_type = 2;
  void clear_tts_type();
  const std::string& tts_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tts_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tts_type();
  PROTOBUF_NODISCARD std::string* release_tts_type();
  void set_allocated_tts_type(std::string* tts_type);
  private:
  const std::string& _internal_tts_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tts_type(const std::string& value);
  std::string* _internal_mutable_tts_type();
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tts_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio2face_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsValueFieldNumber = 3,
    kBsKeyFieldNumber = 4,
    kContentFieldNumber = 1,
    kWavDataFieldNumber = 5,
    kEmotionFieldNumber = 2,
  };
  // repeated float bs_value = 3;
  int bs_value_size() const;
  private:
  int _internal_bs_value_size() const;
  public:
  void clear_bs_value();
  private:
  float _internal_bs_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bs_value() const;
  void _internal_add_bs_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bs_value();
  public:
  float bs_value(int index) const;
  void set_bs_value(int index, float value);
  void add_bs_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bs_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bs_value();

  // repeated string bs_key = 4;
  int bs_key_size() const;
  private:
  int _internal_bs_key_size() const;
  public:
  void clear_bs_key();
  const std::string& bs_key(int index) const;
  std::string* mutable_bs_key(int index);
  void set_bs_key(int index, const std::string& value);
  void set_bs_key(int index, std::string&& value);
  void set_bs_key(int index, const char* value);
  void set_bs_key(int index, const char* value, size_t size);
  std::string* add_bs_key();
  void add_bs_key(const std::string& value);
  void add_bs_key(std::string&& value);
  void add_bs_key(const char* value);
  void add_bs_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bs_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bs_key();
  private:
  const std::string& _internal_bs_key(int index) const;
  std::string* _internal_add_bs_key();
  public:

  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // bytes wav_data = 5;
  void clear_wav_data();
  const std::string& wav_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wav_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wav_data();
  PROTOBUF_NODISCARD std::string* release_wav_data();
  void set_allocated_wav_data(std::string* wav_data);
  private:
  const std::string& _internal_wav_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wav_data(const std::string& value);
  std::string* _internal_mutable_wav_data();
  public:

  // float emotion = 2;
  void clear_emotion();
  float emotion() const;
  void set_emotion(float value);
  private:
  float _internal_emotion() const;
  void _internal_set_emotion(float value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bs_value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bs_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wav_data_;
    float emotion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_audio2face_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string content = 1;
inline void Request::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Request::content() const {
  // @@protoc_insertion_point(field_get:tutorial.Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Request.content)
}
inline std::string* Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:tutorial.Request.content)
  return _s;
}
inline const std::string& Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Request::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_content() {
  // @@protoc_insertion_point(field_release:tutorial.Request.content)
  return _impl_.content_.Release();
}
inline void Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Request.content)
}

// string tts_type = 2;
inline void Request::clear_tts_type() {
  _impl_.tts_type_.ClearToEmpty();
}
inline const std::string& Request::tts_type() const {
  // @@protoc_insertion_point(field_get:tutorial.Request.tts_type)
  return _internal_tts_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_tts_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tts_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Request.tts_type)
}
inline std::string* Request::mutable_tts_type() {
  std::string* _s = _internal_mutable_tts_type();
  // @@protoc_insertion_point(field_mutable:tutorial.Request.tts_type)
  return _s;
}
inline const std::string& Request::_internal_tts_type() const {
  return _impl_.tts_type_.Get();
}
inline void Request::_internal_set_tts_type(const std::string& value) {
  
  _impl_.tts_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_tts_type() {
  
  return _impl_.tts_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_tts_type() {
  // @@protoc_insertion_point(field_release:tutorial.Request.tts_type)
  return _impl_.tts_type_.Release();
}
inline void Request::set_allocated_tts_type(std::string* tts_type) {
  if (tts_type != nullptr) {
    
  } else {
    
  }
  _impl_.tts_type_.SetAllocated(tts_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tts_type_.IsDefault()) {
    _impl_.tts_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Request.tts_type)
}

// -------------------------------------------------------------------

// Response

// string content = 1;
inline void Response::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Response::content() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Response.content)
}
inline std::string* Response::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:tutorial.Response.content)
  return _s;
}
inline const std::string& Response::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Response::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_content() {
  // @@protoc_insertion_point(field_release:tutorial.Response.content)
  return _impl_.content_.Release();
}
inline void Response::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Response.content)
}

// float emotion = 2;
inline void Response::clear_emotion() {
  _impl_.emotion_ = 0;
}
inline float Response::_internal_emotion() const {
  return _impl_.emotion_;
}
inline float Response::emotion() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.emotion)
  return _internal_emotion();
}
inline void Response::_internal_set_emotion(float value) {
  
  _impl_.emotion_ = value;
}
inline void Response::set_emotion(float value) {
  _internal_set_emotion(value);
  // @@protoc_insertion_point(field_set:tutorial.Response.emotion)
}

// repeated float bs_value = 3;
inline int Response::_internal_bs_value_size() const {
  return _impl_.bs_value_.size();
}
inline int Response::bs_value_size() const {
  return _internal_bs_value_size();
}
inline void Response::clear_bs_value() {
  _impl_.bs_value_.Clear();
}
inline float Response::_internal_bs_value(int index) const {
  return _impl_.bs_value_.Get(index);
}
inline float Response::bs_value(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Response.bs_value)
  return _internal_bs_value(index);
}
inline void Response::set_bs_value(int index, float value) {
  _impl_.bs_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_value)
}
inline void Response::_internal_add_bs_value(float value) {
  _impl_.bs_value_.Add(value);
}
inline void Response::add_bs_value(float value) {
  _internal_add_bs_value(value);
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Response::_internal_bs_value() const {
  return _impl_.bs_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Response::bs_value() const {
  // @@protoc_insertion_point(field_list:tutorial.Response.bs_value)
  return _internal_bs_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Response::_internal_mutable_bs_value() {
  return &_impl_.bs_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Response::mutable_bs_value() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Response.bs_value)
  return _internal_mutable_bs_value();
}

// repeated string bs_key = 4;
inline int Response::_internal_bs_key_size() const {
  return _impl_.bs_key_.size();
}
inline int Response::bs_key_size() const {
  return _internal_bs_key_size();
}
inline void Response::clear_bs_key() {
  _impl_.bs_key_.Clear();
}
inline std::string* Response::add_bs_key() {
  std::string* _s = _internal_add_bs_key();
  // @@protoc_insertion_point(field_add_mutable:tutorial.Response.bs_key)
  return _s;
}
inline const std::string& Response::_internal_bs_key(int index) const {
  return _impl_.bs_key_.Get(index);
}
inline const std::string& Response::bs_key(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Response.bs_key)
  return _internal_bs_key(index);
}
inline std::string* Response::mutable_bs_key(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Response.bs_key)
  return _impl_.bs_key_.Mutable(index);
}
inline void Response::set_bs_key(int index, const std::string& value) {
  _impl_.bs_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_key)
}
inline void Response::set_bs_key(int index, std::string&& value) {
  _impl_.bs_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tutorial.Response.bs_key)
}
inline void Response::set_bs_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bs_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Response.bs_key)
}
inline void Response::set_bs_key(int index, const char* value, size_t size) {
  _impl_.bs_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Response.bs_key)
}
inline std::string* Response::_internal_add_bs_key() {
  return _impl_.bs_key_.Add();
}
inline void Response::add_bs_key(const std::string& value) {
  _impl_.bs_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_key)
}
inline void Response::add_bs_key(std::string&& value) {
  _impl_.bs_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.Response.bs_key)
}
inline void Response::add_bs_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bs_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.Response.bs_key)
}
inline void Response::add_bs_key(const char* value, size_t size) {
  _impl_.bs_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.Response.bs_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::bs_key() const {
  // @@protoc_insertion_point(field_list:tutorial.Response.bs_key)
  return _impl_.bs_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_bs_key() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Response.bs_key)
  return &_impl_.bs_key_;
}

// bytes wav_data = 5;
inline void Response::clear_wav_data() {
  _impl_.wav_data_.ClearToEmpty();
}
inline const std::string& Response::wav_data() const {
  // @@protoc_insertion_point(field_get:tutorial.Response.wav_data)
  return _internal_wav_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_wav_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wav_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Response.wav_data)
}
inline std::string* Response::mutable_wav_data() {
  std::string* _s = _internal_mutable_wav_data();
  // @@protoc_insertion_point(field_mutable:tutorial.Response.wav_data)
  return _s;
}
inline const std::string& Response::_internal_wav_data() const {
  return _impl_.wav_data_.Get();
}
inline void Response::_internal_set_wav_data(const std::string& value) {
  
  _impl_.wav_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_wav_data() {
  
  return _impl_.wav_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_wav_data() {
  // @@protoc_insertion_point(field_release:tutorial.Response.wav_data)
  return _impl_.wav_data_.Release();
}
inline void Response::set_allocated_wav_data(std::string* wav_data) {
  if (wav_data != nullptr) {
    
  } else {
    
  }
  _impl_.wav_data_.SetAllocated(wav_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wav_data_.IsDefault()) {
    _impl_.wav_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Response.wav_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_audio2face_2eproto
